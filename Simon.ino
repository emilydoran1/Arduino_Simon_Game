//initialize the 4 LEDsint redPin = 7;int yellowPin = 6;int greenPin = 5;int bluePin = 4;//initialize the pin for the speakerint speaker = 3;//initialize the notes for the buttonsint blueTone = 415;int greenTone = 209;int yellowTone = 310;int redTone = 252;int wrongTone = 1000;//variable to store current level and number LED to matchint level = 1;int numToMatch = 4;//arrays to store random patternint pattern[20];//initialize the 4 switchesint redSwitch = 13;int yellowSwitch = 12;int greenSwitch = 11;int blueSwitch = 10;//initialize the 4 switchstatesint redSwitchState = 0;int yellowSwitchState = 0;int greenSwitchState = 0;int blueSwitchState = 0;void setup() {  Serial.begin(9600);    //play startup tones  advanceLevel();  advanceLevel();  }void loop() {  //read the 4 switchStates  redSwitchState = digitalRead(redSwitch);  yellowSwitchState = digitalRead(yellowSwitch);  greenSwitchState = digitalRead(greenSwitch);  blueSwitchState = digitalRead(blueSwitch);    //start game by pressing green switch  if(greenSwitchState == HIGH){    pinMode(greenPin, OUTPUT);    digitalWrite(greenPin, HIGH);    // tone(speaker,greenTone, 500);    delay(500);    pinMode(greenPin, OUTPUT);    digitalWrite(greenPin, LOW);    delay(500);    generatePattern();  }  else{    // noTone(speaker);  }    //turn red switch on/off when button is pressed  if(redSwitchState == HIGH){    pinMode(redPin, OUTPUT);    digitalWrite(redPin, HIGH);    tone(speaker,redTone, 200);  }  else{    pinMode(redPin, OUTPUT);    digitalWrite(redPin, LOW);    // noTone(speaker);  }    //turn yellow switch on/off when button is pressed  if(yellowSwitchState == HIGH){    pinMode(yellowPin, OUTPUT);    digitalWrite(yellowPin, HIGH);    tone(speaker,yellowTone, 200);  }  else{    pinMode(yellowPin, OUTPUT);    digitalWrite(yellowPin, LOW);    // noTone(speaker);  }    //turn blue switch on/off when button is pressed  if(blueSwitchState == HIGH){    pinMode(bluePin, OUTPUT);    digitalWrite(bluePin, HIGH);    tone(speaker,blueTone, 200);  }  else{    pinMode(bluePin, OUTPUT);    digitalWrite(bluePin, LOW);    // noTone(speaker);  }  }//function to generate patternvoid generatePattern() {  for(int i = 0; i < numToMatch; i++){    pattern[i] = rand() % 4 + 1;   }  // for(int i = 0; i < numToMatch; i++){  //   Serial.print(pattern[i]);  //   Serial.print(", ");  // }    outputPattern();}//function to print the patternvoid outputPattern() {  for(int i = 0; i < numToMatch; i++){    //blue light    if(pattern [i] == 1){      pinMode(bluePin, OUTPUT);      digitalWrite(bluePin, HIGH);      tone(speaker,blueTone, 500);      delay(750);      pinMode(bluePin, OUTPUT);      digitalWrite(bluePin, LOW);      delay(500);    }        //green light    else if(pattern [i] == 2){      pinMode(greenPin, OUTPUT);      digitalWrite(greenPin, HIGH);      tone(speaker,greenTone, 500);      delay(750);      pinMode(greenPin, OUTPUT);      digitalWrite(greenPin, LOW);      delay(500);    }        //yellow light    else if(pattern [i] == 3){      pinMode(yellowPin, OUTPUT);      digitalWrite(yellowPin, HIGH);      tone(speaker,yellowTone, 500);      delay(750);      pinMode(yellowPin, OUTPUT);      digitalWrite(yellowPin, LOW);      delay(500);    }        //red light    else{      pinMode(redPin, OUTPUT);      digitalWrite(redPin, HIGH);      tone(speaker,redTone, 750);      delay(750);      pinMode(redPin, OUTPUT);      digitalWrite(redPin, LOW);      delay(500);    }  }  checkInputPattern();}//function for user to input patternvoid checkInputPattern(){  //reread switchStates  delay(500);  redSwitchState = digitalRead(redSwitch);  yellowSwitchState = digitalRead(yellowSwitch);  greenSwitchState = digitalRead(greenSwitch);  blueSwitchState = digitalRead(blueSwitch);    //variables to store the start time for input  unsigned long startTime = millis();  int i = 0;    //variable to store previous switch states      int redPrevSwitchState = 0;  int yellowPrevSwitchState = 0;  int greenPrevSwitchState = 0;  int bluePrevSwitchState = 0;    boolean nextLevel = false;    while((i < numToMatch) && ((millis() - startTime) < (numToMatch*1000))){    Serial.println(millis() - startTime);        //redefine the switchstates    redSwitchState = digitalRead(redSwitch);    yellowSwitchState = digitalRead(yellowSwitch);    greenSwitchState = digitalRead(greenSwitch);    blueSwitchState = digitalRead(blueSwitch);        Serial.println(pattern[i]);        if(redSwitchState == HIGH){      pinMode(redPin, OUTPUT);      digitalWrite(redPin, HIGH);      redPrevSwitchState = redSwitchState;      if(pattern[i] == 4){        tone(speaker,redTone,200);        //debouncing        while(redPrevSwitchState == redSwitchState){          redSwitchState = digitalRead(redSwitch);        }        if(redSwitchState != redPrevSwitchState){          redPrevSwitchState = 0;          i++;        }        if(i == numToMatch){          nextLevel = true;        }      }      else{        tone(speaker,wrongTone, 1000);        Serial.println("OUT");        i = numToMatch;      }    }    else{      pinMode(redPin, OUTPUT);      digitalWrite(redPin, LOW);    }        if(yellowSwitchState == HIGH){      pinMode(yellowPin, OUTPUT);      digitalWrite(yellowPin, HIGH);      yellowPrevSwitchState = yellowSwitchState;      if(pattern[i] == 3){        tone(speaker,yellowTone,200);        //debouncing        while(yellowPrevSwitchState == yellowSwitchState){          yellowSwitchState = digitalRead(yellowSwitch);        }        if(yellowSwitchState != yellowPrevSwitchState){          yellowPrevSwitchState = 0;          i++;        }        if(i == numToMatch){          nextLevel = true;        }      }      else{        tone(speaker,wrongTone, 1000);        Serial.println("OUT");        i = numToMatch;      }    }    else{      pinMode(yellowPin, OUTPUT);      digitalWrite(yellowPin, LOW);    }        if(greenSwitchState == HIGH){      pinMode(greenPin, OUTPUT);      digitalWrite(greenPin, HIGH);      greenPrevSwitchState = greenSwitchState;      if(pattern[i] == 2){        tone(speaker,greenTone,200);        //debouncing        while(greenPrevSwitchState == greenSwitchState){          greenSwitchState = digitalRead(greenSwitch);        }        if(greenSwitchState != greenPrevSwitchState){          greenPrevSwitchState = 0;          i++;        }        if(i == numToMatch){          nextLevel = true;        }      }      else{        tone(speaker,wrongTone, 1000);        Serial.println("OUT");        i = numToMatch;      }    }    else{      pinMode(greenPin, OUTPUT);      digitalWrite(greenPin, LOW);    }        if(blueSwitchState == HIGH){      pinMode(bluePin, OUTPUT);      digitalWrite(bluePin, HIGH);      bluePrevSwitchState = blueSwitchState;      if(pattern[i] == 1){        tone(speaker,blueTone,200);        //debouncing        while(bluePrevSwitchState == blueSwitchState){          blueSwitchState = digitalRead(blueSwitch);        }        if(yellowSwitchState != bluePrevSwitchState){          bluePrevSwitchState = 0;          i++;        }        if(i == numToMatch){          nextLevel = true;        }      }      else{        tone(speaker,wrongTone, 1000);        Serial.println("OUT");        i = numToMatch;      }    }    else{      pinMode(bluePin, OUTPUT);      digitalWrite(bluePin, LOW);    }  }    //new level tone and light  if(nextLevel){    //turn all other pins on    pinMode(yellowPin, OUTPUT);    digitalWrite(yellowPin, HIGH);    pinMode(redPin, OUTPUT);    digitalWrite(redPin, HIGH);    pinMode(greenPin, OUTPUT);    digitalWrite(greenPin, HIGH);    pinMode(bluePin, OUTPUT);    digitalWrite(bluePin, HIGH);        delay(1000);        pinMode(greenPin, OUTPUT);    digitalWrite(greenPin, HIGH);    delay(2000);    pinMode(greenPin, OUTPUT);    digitalWrite(greenPin, LOW);    delay(500);    pinMode(greenPin, OUTPUT);    digitalWrite(greenPin, HIGH);    delay(2000);    pinMode(greenPin, OUTPUT);    digitalWrite(greenPin, LOW);    delay(500);        //reset pattern[]    for(int i = 0; i < numToMatch; i++){      pattern[i] = 0;    }        //increment the number to match every 3 in a row right    level++;    if((level % 3) == 1){      pinMode(yellowPin, OUTPUT);      digitalWrite(yellowPin, LOW);      pinMode(redPin, OUTPUT);      digitalWrite(redPin, LOW);      pinMode(greenPin, OUTPUT);      digitalWrite(greenPin, LOW);      pinMode(bluePin, OUTPUT);      digitalWrite(bluePin, LOW);      delay(100);      numToMatch++;      advanceLevel();    }  }    //check if time is up or if i is higher than the number to match  else if((millis() - startTime) > (numToMatch*1000) || i >= numToMatch){    //turn all other pins on    pinMode(yellowPin, OUTPUT);    digitalWrite(yellowPin, HIGH);    pinMode(redPin, OUTPUT);    digitalWrite(redPin, HIGH);    pinMode(greenPin, OUTPUT);    digitalWrite(greenPin, HIGH);    pinMode(bluePin, OUTPUT);    digitalWrite(bluePin, HIGH);        delay(1000);    pinMode(redPin, OUTPUT);    digitalWrite(redPin, HIGH);    delay(2000);    pinMode(redPin, OUTPUT);    digitalWrite(redPin, LOW);    delay(500);    pinMode(redPin, OUTPUT);    digitalWrite(redPin, HIGH);    delay(2000);    pinMode(redPin, OUTPUT);    digitalWrite(redPin, LOW);    delay(500);        //reset pattern[]    for(int i = 0; i < numToMatch; i++){      pattern[i] = 0;    }        //reset level    level = 1;    numToMatch = 4;    pinMode(greenPin, OUTPUT);    digitalWrite(greenPin, LOW);      }}//function to play tones when level advancesvoid advanceLevel(){  tone(speaker,blueTone,200);  pinMode(bluePin, OUTPUT);  digitalWrite(bluePin, HIGH);  delay(200);  digitalWrite(bluePin, LOW);    tone(speaker,greenTone,200);  pinMode(greenPin, OUTPUT);  digitalWrite(greenPin, HIGH);  delay(200);  digitalWrite(greenPin, LOW);    tone(speaker,yellowTone,200);  pinMode(yellowPin, OUTPUT);  digitalWrite(yellowPin, HIGH);  delay(200);  digitalWrite(yellowPin, LOW);    tone(speaker,redTone,200);  pinMode(redPin, OUTPUT);  digitalWrite(redPin, HIGH);  delay(200);  digitalWrite(redPin, LOW);  }